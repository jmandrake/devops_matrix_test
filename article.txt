How can I create a stand-alone binary from a Python script?
-----------------------------------------------------------

You don't need the ability to compile Python to C code if all you want
is a stand-alone program that users can download and run without
having to install the Python distribution first.  There are a number
of tools that determine the set of modules required by a program and
bind these modules together with a Python binary to produce a single
executable.

One is to use the freeze tool, which is included in the Python source
tree as "Tools/freeze". It converts Python byte code to C arrays; with
a C compiler you can embed all your modules into a new program, which
is then linked with the standard Python modules.

It works by scanning your source recursively for import statements (in
both forms) and looking for the modules in the standard Python path as
well as in the source directory (for built-in modules).  It then turns
the bytecode for modules written in Python into C code (array
initializers that can be turned into code objects using the marshal
module) and creates a custom-made config file that only contains those
built-in modules which are actually used in the program.  It then
compiles the generated C code and links it with the rest of the Python
interpreter to form a self-contained binary which acts exactly like
your script.

What are the rules for local and global variables in Python?
------------------------------------------------------------

In Python, variables that are only referenced inside a function are
implicitly global.  If a variable is assigned a value anywhere within
the function's body, it's assumed to be a local unless explicitly
declared as global.

Though a bit surprising at first, a moment's consideration explains
this.  On one hand, requiring "global" for assigned variables provides
a bar against unintended side-effects.  On the other hand, if "global"
was required for all global references, you'd be using "global" all
the time.  You'd have to declare as global every reference to a built-
in function or to a component of an imported module.  This clutter
would defeat the usefulness of the "global" declaration for
identifying side-effects.